package com.cmc.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;

@Configuration
public class OpenApiConfig {
    
    @Value("${server.servlet.context-path:/api}")
    private String contextPath;
    
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(apiInfo())
                .servers(apiServers())
                .addSecurityItem(securityRequirement())
                .schemaRequirement("bearerAuth", securityScheme());
    }
    
    private Info apiInfo() {
        return new Info()
                .title("üìöüîê Online Library Encryption System API")
                .description("""
                        # Online Library Encryption System
                        
                        H·ªá th·ªëng th∆∞ vi·ªán s·ªë an to√†n v·ªõi m√£ h√≥a AES-256-GCM v√† RSA-2048.
                        
                        ## üéØ T√≠nh NƒÉng Ch√≠nh
                        
                        ### üîê B·∫£o M·∫≠t Cao C·∫•p
                        - **AES-256-GCM**: M√£ h√≥a file PDF g·ªëc
                        - **RSA-2048**: B·∫£o v·ªá AES key
                        - **JWT Authentication**: X√°c th·ª±c ng∆∞·ªùi d√πng
                        
                        ### üíß Watermark C√° Nh√¢n
                        - Watermark tr√™n m·ªói trang: `email | t√™n | th·ªùi gian`
                        - NgƒÉn ch·∫∑n chia s·∫ª tr√°i ph√©p
                        
                        ### üë• Ph√¢n Quy·ªÅn 3 C·∫•p
                        - **ADMIN**: Upload s√°ch, qu·∫£n l√Ω users
                        - **VIP**: T·∫£i PDF g·ªëc (kh√¥ng watermark)
                        - **STANDARD**: Xem ·∫£nh c√≥ watermark
                        
                        ## üöÄ C√°ch S·ª≠ D·ª•ng API
                        
                        1. **ƒêƒÉng nh·∫≠p**: POST `/auth/login` ƒë·ªÉ l·∫•y JWT token
                        2. **Th√™m Authorization Header**: `Bearer YOUR_JWT_TOKEN`
                        3. **S·ª≠ d·ª•ng endpoints**: Theo quy·ªÅn c·ªßa user
                        
                        ## üîë Test Accounts
                        
                        | Username | Password | Role | Permissions |
                        |----------|----------|------|-------------|
                        | admin | admin123 | ADMIN | Full access |
                        | vipuser | user123 | VIP | Download PDFs |
                        | standarduser | user123 | STANDARD | View images only |
                        """)
                .version("1.0.0")
                .contact(apiContact())
                .license(apiLicense());
    }
    
    private Contact apiContact() {
        return new Contact()
                .name("Online Library Team")
                .email("support@onllib.com")
                .url("https://github.com/haonguyen2711/onl-lib");
    }
    
    private License apiLicense() {
        return new License()
                .name("MIT License")
                .url("https://opensource.org/licenses/MIT");
    }
    
    private List<Server> apiServers() {
        return List.of(
                new Server()
                        .url("http://localhost:8080" + contextPath)
                        .description("üîß Development Server"),
                new Server()
                        .url("http://staging.onllib.local" + contextPath)
                        .description("üß™ Staging Server"),
                new Server()
                        .url("https://api.onllib.com" + contextPath)
                        .description("üöÄ Production Server")
        );
    }
    
    private SecurityRequirement securityRequirement() {
        return new SecurityRequirement().addList("bearerAuth");
    }
    
    private SecurityScheme securityScheme() {
        return new SecurityScheme()
                .type(SecurityScheme.Type.HTTP)
                .scheme("bearer")
                .bearerFormat("JWT")
                .description("üîë JWT Authentication Token")
                .in(SecurityScheme.In.HEADER)
                .name("Authorization");
    }
}
